@page
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
    public string? GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(this.HttpContext).RequestToken;
    }
}
@model idpMultiTenant1.Areas.Identity.Pages.Account.LoginFido2MfaModel
@{
    ViewData["Title"] = "Login with Fido2 MFA";
}

<h4>@ViewData["Title"]</h4>
<div class="section">
    <div class="container">
        <h1 class="title is-1">2FA/MFA</h1>

        <div class="columns">
            <div class="column is-4">

                <h3 class="title is-3">Fido2 2FA</h3>
                <form action="/LoginFido2Mfa" method="post" id="signin">
                    <input type="hidden" id="RequestVerificationToken" name="RequestVerificationToken" value="@GetAntiXsrfRequestToken()" />
                    <input type="hidden" id="tenantId" name="tenantId" value="@Model.TenantId" />
                    <div class="field">
                        <div class="control">
                            <button class="btn btn-primary">2FA with FIDO2 device</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div id="fido2logindisplay"></div>

    </div>
</div>
<p>
    Don't have access to your authenticator device? You can
    <a id="recovery-code-login" asp-page="./LoginWithRecoveryCode" asp-route-returnUrl="@Model.ReturnUrl">log in with a recovery code</a>.
</p>

<div style="display:none;" id="fido2TapKeyToLogin"></div>
<div style="display:none;" id="fido2CouldNotVerifyAssertion"></div>
<input type="hidden" id="fido2ReturnUrl" value="@Model.ReturnUrl" />


<script src="~/js/mfa.helpers.js"></script>
<script src="~/js/instant.js"></script>
<script src="~/js/mfa.login.js"></script>
